/**
 * ngvenezuela.github.io - Sitio web de la comunidad de Desarrolladores y Entusiastas de Angular en Venezuela
 * @author 
 * @version v1.0.0
 * @link https://github.com/ngVenezuela/ngvenezuela.github.io#readme
 */

/**
 * Módulo de la aplicación
 */
/*jslint browser: true*/
/*global $, angular*/
(function () {
    'use strict';
    angular
        .module('ng.venezuela', [
            'ui.router',
            'github.ng.venezuela'
        ]);
})();

/**
 * Rutas de la aplicación.
 */
/*jslint browser: true*/
/*global $, angular, routes, removerCache*/
(function () {
    'use strict';
    angular
        .module('ng.venezuela')
        .config(routes)
        .run(removerCache);

    // Inyectando dependencias.
    routes.$inject = ['$stateProvider', '$urlRouterProvider', '$locationProvider'];
    /**
     * @description gestiona las rutas de la aplicación.
     * @param $stateProvider
     * @param $urlRouterProvider
     */
    function routes($stateProvider, $urlRouterProvider, $locationProvider) {
        $urlRouterProvider.otherwise('/');
        $stateProvider
            .state('home', {
            url : '/',
            controller: 'HomeController',
            controllerAs : 'ctrl',
            templateUrl : './templates/home/home_tpl.html'
        })
            .state('quienes', {
            url: '/quienes-somos',
            controller: 'QuienesSomosController',
            controllerAs: 'ctrl',
            templateUrl: './templates/quienes/quienes_tpl.html'
        })
            .state('repos', {
            url: '/repos',
            controller: 'RepoController',
            controllerAs: 'ctrl',
            templateUrl: './templates/repos/repos_tpl.html'
        })
            .state('unirme', {
            url: '/quiero-unirme',
            templateUrl: './templates/unirme/unirme_tpl.html'
        })
            .state('contacto', {
            url: '/contacto',
            templateUrl: './templates/contacto/contacto_tpl.html'
        });
        $locationProvider.html5Mode(false);
    }
    // Inyectando dependencias.
    removerCache.$inject = ['$rootScope', '$templateCache'];
    /**
     * @description Remueve el cache al detectar que un cambio de ruta comienza.
     * @param $rootScope
     * @param $templateCache
     */
    function removerCache($rootScope, $templateCache) {
        $rootScope.$on('$routeChangeStart', function (event, next, current) {
            if (typeof (current) !== 'undefined') {
                $templateCache.remove(current.templateUrl);
            }
        });
    }

})();

/**
 * Github Service
 * Servicio de comunicación con la
 * API de Github, versión 3.0
 */
(function () {
    'use strict';
    angular
        .module('github.ng.venezuela',[])
        .constant('gh',{
        BASE    : 'https://api.github.com',
        ORG     : '/orgs/ngVenezuela',
        REPOS   : '/orgs/ngVenezuela/repos',
        MEMBERS : '/orgs/ngVenezuela/members'
    })
        .factory('GitHub',githubService);

    //Inyectando Dependencias
    githubService.$inject = ['$log','$http','gh'];
    function githubService ($log, $http,gh) {
        return {
            organizacion : getOrganizacion,
            repositorios : getRepos,
            miembros     : getMembers
        };
        /**
        * @description realiza una petición a la API de Github
        * solicitando la información de ngVenezuela como
        * oganización.
        */
        function getOrganizacion () {
            var peticion = $http({
                method : 'GET',
                url : gh.BASE+gh.ORG
            });
            return peticion
                .then(function(response){
                return response.data;
            })
                .catch(function(response){
                $log.error('Error organizacion');
                return response;
            });
        }
        /**
        * @description realiza una petición a la API de Github
        * solicitando la información de los repos de ngVenezuela.
        */
        function getRepos () {
            var peticion = $http({
                method : 'GET',
                url : gh.BASE+gh.REPOS
            });
            return peticion
                .then(function(response){
                return response.data;
            })
                .catch(function(response){
                $log.error('Error organizacion');
                return response;
            });
        }
        function getMembers () {
            var peticion = $http({
                method : 'GET',
                url : gh.BASE+gh.MEMBERS
            });
            return peticion
                .then(function(response){
                return response.data;
            })
                .catch(function(response){
                $log.error('Error organizacion');
                return response;
            });
        }
    } // Fin githubService
})();

/**
 * Controladores de la aplicación.
 */
/*jslint browser: true*/
/*global $, angular, Organizacion, Repositorios,
QuienesSomos, execute, ObtenerInformacion, ObtenerRepos*/
(function () {
    'use strict';
    angular
        .module('ng.venezuela')
        .controller('HomeController', Organizacion)
        .controller('RepoController', Repositorios)
        .controller('QuienesSomosController', QuienesSomos);
    Organizacion.$inject = ['GitHub'];
    function Organizacion(GitHub) {
        var vm = this;
        vm.organizacion = {};
        execute();
        function execute() {
            return new ObtenerInformacion();
        }
        function ObtenerInformacion() {
            return GitHub.organizacion()
                .then(function (data) {
                vm.organizacion = data;
                //console.log(data);
                return vm.organizacion;
            });
        }
    }
    function Repositorios(GitHub) {
        var vm = this;
        vm.repositorios = {};
        execute();
        function execute() {
            return new ObtenerRepos();
        }
        function ObtenerRepos() {
            return GitHub.repositorios()
                .then(function (data) {
                vm.repositorios = data;
                //console.log(data);
                return vm.repositorios;
            });
        }
    }
    function QuienesSomos() {

    }

})(); // fin main function

//# sourceMappingURL=data:application/json;charset=utf8;base64,
